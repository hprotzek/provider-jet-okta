/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OauthRedirectURIObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type OauthRedirectURIParameters struct {

	// +kubebuilder:validation:Required
	AppID *string `json:"appId" tf:"app_id,omitempty"`

	// Redirect URI to append to Okta OIDC application.
	// +kubebuilder:validation:Required
	URI *string `json:"uri" tf:"uri,omitempty"`
}

// OauthRedirectURISpec defines the desired state of OauthRedirectURI
type OauthRedirectURISpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OauthRedirectURIParameters `json:"forProvider"`
}

// OauthRedirectURIStatus defines the observed state of OauthRedirectURI.
type OauthRedirectURIStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OauthRedirectURIObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OauthRedirectURI is the Schema for the OauthRedirectURIs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oktajet}
type OauthRedirectURI struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OauthRedirectURISpec   `json:"spec"`
	Status            OauthRedirectURIStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OauthRedirectURIList contains a list of OauthRedirectURIs
type OauthRedirectURIList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OauthRedirectURI `json:"items"`
}

// Repository type metadata.
var (
	OauthRedirectURI_Kind             = "OauthRedirectURI"
	OauthRedirectURI_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OauthRedirectURI_Kind}.String()
	OauthRedirectURI_KindAPIVersion   = OauthRedirectURI_Kind + "." + CRDGroupVersion.String()
	OauthRedirectURI_GroupVersionKind = CRDGroupVersion.WithKind(OauthRedirectURI_Kind)
)

func init() {
	SchemeBuilder.Register(&OauthRedirectURI{}, &OauthRedirectURIList{})
}
